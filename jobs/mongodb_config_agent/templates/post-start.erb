#!/bin/bash -e
# vim: set ft=sh

export PATH=/var/vcap/packages/jq/bin:/var/vcap/packages/mongodb/bin:$PATH

source /var/vcap/packages/mongodb-config-agent/mongo_utils.sh
export MONGO_OM_URL='<%= p('mongo_ops.url').chomp("/") %>'
export MONGO_OM_USER='<%= p('mongo_ops.username') %>'
export MONGO_OM_API_KEY='<%= p('mongo_ops.api_key') %>'
export MONGO_OM_GROUP_ID='<%= p('mongo_ops.group_id') %>'

echo "Waiting 600s for MongoDB to accept connections..."
elapsed=0
until [ $elapsed -ge 600 ]
do
<% if p("mongo_ops.plan_id") == 'standalone' %>
  mongo \
    --host <%= link("mongod_node").instances.first.address %> --port 28000 -p <%= p("mongo_ops.admin_password") %> \
    -u admin admin --eval 'quit(db.runCommand({ping: 1}).ok ? 0 : 1)' \
    --quiet &> /dev/null && break
<% elsif p("mongo_ops.plan_id") == 'replica_set' %>
  mongo \
    --host <%= link("mongod_node").instances.map {|e| e.address}.join(',') %> --port 28000 -p <%= p("mongo_ops.admin_password") %> \
    -u admin admin --eval 'quit(db.runCommand({ping: 1}).ok ? 0 : 1)' \
    --quiet &> /dev/null && break
<% elsif p("mongo_ops.plan_id") == 'sharded_cluster' %>
  mongo \
    --host <%= link("mongod_node").instances.map {|e| e.address}.join(',') %> --port 28000 -p <%= p("mongo_ops.admin_password") %> \
    -u admin admin --eval 'quit(db.runCommand({ping: 1}).ok ? 0 : 1)' \
    --quiet &> /dev/null && break
<% end %>
  elapsed=$[$elapsed+5]
  sleep 5
done

if [ "$elapsed" -ge "600" ]; then
   echo "ERROR: Cannot connect to MongoDB. Exiting..."
   exit 1
else
<% if p("mongo_ops.backup_enabled") %>
  while true
  do
<% if p("mongo_ops.plan_id") == 'replica_set' %>
    clusters=($(om_api_call "GET" "clusters" | jq -r ".results[].id"))
<% elsif p("mongo_ops.plan_id") == 'sharded_cluster' %>
    clusters=($(om_api_call "GET" "clusters" | jq -r '.results[] | select(.typeName == "SHARDED_REPLICA_SET").id'))
<% end %>

    if [ ${#clusters[@]} -eq 0 ]; then
        sleep 5
        continue
    fi

    for cluster in "${clusters[@]}"
    do
        stat=$(om_api_call "GET" "backupConfigs/${cluster}" | jq -r ".statusName")
        if [ $stat != "STARTED" ]; then
                om_api_call "PATCH" "backupConfigs/${cluster}" '{"statusName": "STARTED", "storageEngineName": "WIRED_TIGER", "syncSource": "SECONDARY"}'
        fi
    done

    break
  done
<% end %>
  exit 0
fi


